#!/usr/bin/perl
###############################################################################
#
# eruditify article.html [article2.html ...]
#
# Describe me.
#
###############################################################################
use strict;
use warnings;

use Carp;
use English;
use Fatal qw( open close );     # Force builtins to throw exceptions on failure
use File::Basename;
use Getopt::Long;
use IO::Interactive qw( interactive );
use IO::Prompt;
use Perl6::Slurp;
use Readonly;
use Regexp::DefaultFlags qw( xmsi ); # Regexes in this namespace /xmsi-modified

###############################################################################
# Process command line 
###############################################################################

# Variables set in response to command-line arguments, with defaults
my $infile    = '-';
my $outfile   = '-';
my $overwrite = 0;
my $verbose   = 0;

# Process command line...
my $options_ok = GetOptions (
  # Application-specific options
  'overwrite' => \$overwrite,     # --overwrite flag is boolean
  'verbose'   => \$verbose,       # --verbose flag is boolean
  
  # Standard meta-options
  'usage'   => sub { print show_usage() },
  'help'    => sub { print show_help() },
);

# Fail if unknown arguments encountered
print show_usage() if ! $options_ok;

###############################################################################
# Process the files
###############################################################################
Readonly my $NEWLINE  => "\n";
Readonly my $SPACE    => ' ';
Readonly my $XML_EXT  => '.xml';

# Regular expressions
Readonly my $IS_HTML  => qr{ \.html \s* \z };

# @todo include these? check w/ Mike N.  If these are octal representations of
# ASCII characters, the replacements are wrong!!!
#  '\\222' => q{"},
#  '\\223' => q{'},
#  '\\224' => q{'},

Readonly my @REPLACEABLES => (
  # Discard style-based markup that conveys nothing useful: 
  # replace with $SPACE to preserve word breaks
  sub { $_[0] =~ s{ <br \s* /> }{$SPACE}g; },   # <br/> or <br />
  sub { $_[0] =~ s{ </?code>   }{$SPACE}g; },   # <small> or </small>
  sub { $_[0] =~ s{ </?small>  }{$SPACE}g; },   # <code> or </code>
  
  # Discard <h1>, <h2>, ... <h6> headings
  sub { $_[0] =~ s{ < /? h ([123456]) > }{$SPACE}g; },
  
  # Translate style-based markup to Ã‰rudit equivalents
  sub { $_[0] =~ s{ <i>   (.*?) </i>   }{<marquage typemarq="italique">$1</marquage>}g; },  # and <em>?
  sub { $_[0] =~ s{ <b>   (.*?) </b>   }{<marquage typemarq="gras">$1</marquage>}g; },      # and <strong>?
  sub { $_[0] =~ s{ <sup> (.*?) </sup> }{<exposant>$1</exposant>}g; },
  sub { $_[0] =~ s{ <sub> (.*?) </sub> }{<indice>$1</indice>}g; },
);

# Begin file processing block
{
  local $OUTPUT_RECORD_SEPARATOR  = $NEWLINE;   # Newline after each print
  
  # Shift files out of @ARGV so we can prompt for input later on
  # @fixme I don't like this
  my @files;
  while (my $file = shift @ARGV) {
    push @files, $file;
  }
  
  FILE: foreach my $file (@files) {
    print {interactive} "Processing $file..." if $verbose;

    # Process HTML files only
    carp "Skipping $file, not an HTML file"
      and next FILE 
        unless $file =~ $IS_HTML;
        
    # Files must exist
    carp "Skipping $file, not found"
      and next FILE
        if ! -e $file;
            
    # Files must be readable
    carp "Skipping $file, not readable"
      and next FILE
        if ! -r $file;
        
    # Target has same location & name as $file, except with a '.xml' extension
    ( my $xml_file = $file ) =~ s{$IS_HTML}{$XML_EXT};
    
    # Write to the target...
    my $write_to_target = 1;
    
    # ... unless it already exists & --overwrite not specified
    if (-e $xml_file and ! $overwrite) {
      # revert $\ to undef when prompting for input
      local $OUTPUT_RECORD_SEPARATOR = undef;
      my $response = prompt "File $xml_file exists. Overwrite? [y/n] ",
                            -require=>{ 'Must be y or n: ' => qr/[yn]/ };
                            
      $write_to_target = ($response =~ /y/i);
    }
    
    # Warn if we're not overwriting target:
    carp "Skipping $file. Target $xml_file exists and overwrite rejected."
      and next FILE
        if ! $write_to_target;
        
    # Target must be writeable, if it exists
    carp "Skipping $file. Can't overwrite target $xml_file"
      and next FILE
        if ( -e $xml_file and ! -w $xml_file );

    # If not, its directory must be writeable
    carp "Skipping $file. Can't write to target directory ". dirname($file)
     and next FILE
      if (! -e $xml_file and ! -w dirname($file));
    
    # Power-slurp the (X)HTML. Let it throw an exception on failure: we've
    # already checked the obvious (-e, -r $file)
    my $xhtml = slurp $file;
    
    # Replace the replaceables
    foreach my $sub (@REPLACEABLES) {
      &{$sub}($xhtml);
    }

    print {interactive} "Writing to $xml_file" if $verbose;

    # Write Erudit "XML" to target file. Let Fatal.pm take care of exceptions.
    open my $XML_FILE, '>', $xml_file;
    print {$XML_FILE} $xhtml;
    close $XML_FILE;
    
  } # end FILE

  print {interactive} "Done." if $verbose;
  
} # end file processing block

exit 0;

###############################################################################
# Standard meta-option: usage summary
###############################################################################
sub show_usage {
  my $usage = <<'END_USAGE';
Usage: eruditify [-o] [-v] article.html [article2.html ...]
END_USAGE
# end heredoc

  return $usage;
}

###############################################################################
# Standard meta-option: detailed help
###############################################################################
sub show_help {
  my $usage = show_usage();
  my $help  = <<"END_HELP";
eruditify - Convert HTML .html files to XML .xml files.  Replace HTML style
            markup with equivalent Erudit markup.  Remove unnecessary HTML
            markup. Resulting XML file is only a first draft & will not be valid!
            
${usage}
Options:
  -o, --overwrite If target XML file exists, overwrite without prompting.
  -v, --verbose   Display details of script progress.
  -u, --usage     Print the usage line of this summary.
  -h, --help      Print this summary.

Arguments:
  article.html [...]  One or more HTML files.
  
END_HELP
# end heredoc

  return $help;
}