#!/usr/local/bin/php
<?php
/**
 @todo: describe me
 *
 * To keep the usage of this script as simple as possible, declare all classes
 * in this file; split into re-usable class files later, if needed.
 */

/* ========================================================================= */
//  Class OJSIssue: 
//  Represents an issue, with one or more articles, to be imported to OJS.
/* ========================================================================= */
  /** 
   @todo: this object contains information required to build an OJS-importable
   XML file, but the actual ML document construction should handled by a
   Marshaller-type object.  Remove the to_xml() method & any supporting bits
   */
class OJSIssue {

  // convert booleans to string values
  const STR_BOOLEAN_TRUE = 'true';
  const STR_BOOLEAN_FALSE = 'false';
  
  private $title = '';
  private $volume = '';
  private $issue_number = '';
  private $year = '';
  private $date_published = '';
  
  // Sensible defaults for values unlikely to change
  private $is_published = TRUE;
  private $is_current = FALSE;
  
  function __contstruct() {
    // does nothing
  }
  
  /** issue title */
  public function get_title() {
    return $this->title;
  }
  public function set_title($title) {
    $this->title = $title;
  }
  
  /** volume */  
  public function get_volume() {
    return $this->volume;
  }
  public function set_volume($volume) {
    $this->volume = $volume;
  }

  /** issue number */
  public function get_issue_number() {
    return $this->issue_number;
  }
  public function set_issue_number($issue) {
    $this->issue = $issue_number;
  }

  /** year of publication: yyyy */
  public function get_year() {
    return $this->year;
  }
  public function set_year($year) {
    $this->year = $year;
  }

  /** date published: yyyy-mm-dd */
  public function get_date_published() {
    return $this->date_published;
  }
  public function set_date_published($date_published) {
    $this->date_published = $date_published;
  }
  
  /** issue is published? */
  public function is_published() {
    return $this->is_published;
  }
  public function set_is_published($is_published) {
    $this->is_published = $is_published;
  }
  
  /** issue is current? */
  public function is_current() {
    return $this->is_current;
  }
  public function set_is_current($is_current) {
    $this->is_current = $is_current;
  }
  
  /** OJS-importable XML representation of issue */
  public function to_xml() {
    
    // Initialize a SimpleXML object 
    $issues_doc = $this->_init_document();

    // The issue we're populating
    $issue_element = $issues_doc->issue[0];
    
    // Set issue properties
    $issue_element->addAttribute('published', $this->_boolean_to_str($this->is_published()));
    $issue_element->addAttribute('current', $this->_boolean_to_str($this->is_current()));
    
    // Add issue metadata
    $issue_element->addChild('title', $this->get_title());
    $issue_element->addChild('volume', $this->get_volume());
    $issue_element->addChild('number', $this->get_issue_number());
    $issue_element->addChild('year', $this->get_year());
    $issue_element->addChild('date_published', $this->get_date_published());
    
    // Add sections where needed
    /*
    for each article 
      get type
      
      if section doesn't exist for type
        create section
        
      add article to secion
    */

    return $issues_doc->asXML();
  }
  
  private function _init_document() {
    $ojs_xml = 
      '<?xml version="1.0" encoding="UTF-8"?>' .
      '<!DOCTYPE issues PUBLIC "-//PKP//OJS Articles and Issues XML//EN" "http://pkp.sfu.ca/ojs/dtds/native.dtd">' .
      '<issues>' .
        '<issue/>' . 
      '</issues>';

    return new SimpleXMLElement($ojs_xml);
  }

  private function _boolean_to_str($boolean) {
    return ( $boolean ? self::STR_BOOLEAN_TRUE : self::STR_BOOLEAN_FALSE );
  }
}

/* ========================================================================= */
//  Class OJSArticle:
//  An OJS-importable journal article, generated by the
//  EruditArticleUnmarshallerfrom an Erudit-encoded XML file.
/* ========================================================================= */
/** 
 @todo: this object contains information required to build an OJS-importable
 XML file, but the actual ML document construction should handled by a
 Marshaller-type object.  Remove the to_xml() method & any supporting bits
 */
class OJSArticle {
  
  private $title = '';
  
  function __contstruct() {
    // does nothing
  }
  
  /** article title */
  public function get_title() {
    return $this->title;
  }
  public function set_title($title) {
    $this->title = $title;
  }
  
}

/* ========================================================================= */
//  Class EruditArticleUnmarshaller:
//  Unmarshalls contents of an Erudit-encoded XML file into an OJS-importable
//  OJSArticle object.
/* ========================================================================= */
/** 
 @todo unmarshall XML file to OJSJournal and/or OJSArticle? 
 We shouldn't maintain issue information in articles
 */
 
 /**
  @todo: replace SimpleXML business with DOM code.
  SimpleXML too simple for Erudit encoding; will not handle 
  content models like (PCDATA | element)
  */

class EruditArticleUnmarshaller {

  /** @todo describe me */
  private $typemarq_map = array(
    'gras'     => 'strong',
    'italique' => 'em'
  );  
  
  public function unmarshall($xml_file) {
    // Build a DOMDocument from XML file
    $erudit_doc = new DOMDocument();
    $erudit_doc->load($xml_file);

    // Create an XPath object to locate values to populate OJSArticle object
    $erudit_xpath = new DOMXPath($erudit_doc);

    // Initialize OJSArticle with values read from Erudit-encoded article
    $ojs_article = new OJSArticle();

    $ojs_article->set_title($this->_get_title($erudit_xpath));

    // pass back the article
    return $ojs_article;
  }
    
  /** helper function: constructs article title */
  private function _get_title($xpath_doc) {
    $title = '';

    // Query for title
    $title_nodelist = $xpath_doc->query('/article/liminaire/grtitre/titre');
    
    // Erudit DTD permits a single title in the title group    
    if ($title_nodelist->length) {

      // A title may be a mix of text and <marquage> elements. Preserve markup
      // in import by translating <marquage> into CDATA-ized HTML markup 
      $title = $this->_preserve_markup($xpath_doc, $title_nodelist->item(0));
      
      // Title may be followed by (at most) one subtitle element
      $subtitle_nodelist = $xpath_doc->query('/article/liminaire/grtitre/sstitre');
      
      if ($subtitle_nodelist->length) {
        // add subtitle, preserving any embedded markup
        $title .= ' ' . $this->_preserve_markup($xpath_doc, $subtitle_nodelist->item(0));
      }
    }
    
    // If no title, look for bibliography review title
    if (! $title) {
      $
    }
    
    return $title;
  }
  
  /**
   * Preserves formatting in <marquage> tags as CDATA-ized HTML
   * @todo describe me...
   */
  private function _preserve_markup($xpath_doc, $node) {
    $node_text = $node->nodeValue;

    // First, determine if the node contains any <marquage> elements
    $nodelist = $xpath_doc->query('.//marquage', $node);
    
    if (! $nodelist->length) {
      // No markup: return node content
      return $node_text;
    }
    
    // Otherwise, replace sections of node content with CDATA-wrapped 'markup' 
    foreach ($nodelist as $markup_node) {
      $markup_text = $markup_node->nodeValue;
      $html_tag = $this->_translate_marquage($markup_node->getAttribute('typemarq'));
      
      if (! $html_tag) {
        // Some times of markup we don't care about
        continue;
      }
      $node_text = str_replace($markup_text, "<![CDATA[<$html_tag>]]>$markup_text<![CDATA[</$html_tag>]]>", $node_text);
    }
    
    return $node_text;
  }
  
  /**
   * Map marquage attribute to an HTML tag
   * @todo describe me
   */
  private function _translate_marquage($typemarq_attr) {
    $html_tag = '';
    
    if (array_key_exists($typemarq_attr, $this->typemarq_map)) {
      $html_tag = $this->typemarq_map[$typemarq_attr];
    }
    
    return $html_tag;
  }
}

/* ========================================================================= */
//  Class ExceptionReporter
//  Convert standard error-reporting of internal PHP functions to exceptions
/* ========================================================================= */
class ExceptionReporter {
  
  public static function exception($severity, $message, $file_name, $line_number) {
    // We don't really have an exception code: fake it
    $exception_code = 0;
    
    throw new ErrorException($message, $exception_code, $severity, $file_name, $line_number);
  }

}

/* ========================================================================= */
//  Constants
/* ========================================================================= */

define('XML_DIR', 'XML');
define('XML_FILE_PATTERN', '*.xml');

/* ========================================================================= */
//  Argument handling
/* ========================================================================= */

/**
 @todo write this
 */
$issue_source_directory = 'MCR/1987/Vol_25';

/* ========================================================================= */
//  Error handling
/* ========================================================================= */

set_error_handler("ExceptionReporter::exception");

/* ========================================================================= */
//  Script execution
/* ========================================================================= */

// Find XML-encoded article files
$xml_files = glob($issue_source_directory . '/' . XML_DIR . '/' . XML_FILE_PATTERN);

// Decompose Erudit Article XML files into OJS-importable objects
$unmarshaller = new EruditArticleUnmarshaller();

foreach ($xml_files as $xml_file) {

  try {
    echo $xml_file, PHP_EOL;
    $ojs_article = $unmarshaller->unmarshall($xml_file);
    echo $ojs_article->get_title(), PHP_EOL, PHP_EOL;
  }
  catch (ErrorException $e) {
    // get severity & log, or die
    echo $e->getMessage(), PHP_EOL;
    continue;
  }

}
/** 
 @todo if there are no articles exit
 */
/* 
// Initialize an OJSIssue object, representing the issue to be imported to OJS
$ojs_issue = new OJSIssue();

$ojs_issue->set_title('Volume 25, Spring/Printemps 1987');
$ojs_issue->set_volume('25');
$ojs_issue->set_year('1987');
$ojs_issue->set_date_published('1987-01-01');
*/

/* ========================================================================= */
//  Write the XML 
/* ========================================================================= */

//echo $ojs_issue->to_xml(), PHP_EOL, PHP_EOL;

/* ========================================================================= */
//  Finis.
/* ========================================================================= */

exit(0);

?>